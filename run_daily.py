import subprocess
import logging
import requests
import os
from datetime import datetime

# ======================================
# CONFIGURA√á√ïES PRINCIPAIS
# ======================================
API_URL = "https://previsao-futebol.onrender.com/meta/update"
API_KEY = os.getenv("ENDPOINT_API_KEY", "d110d6f22b446c54deadcadef7b234f6966af678")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("CHAT_ID")

# ======================================
# GARANTIR EXIST√äNCIA DA PASTA DE LOGS
# ======================================
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

# ======================================
# CONFIGURA√á√ÉO DE LOGGING
# ======================================
LOG_FILE = os.path.join(LOG_DIR, "run_daily.log")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("daily_update")

# ======================================
# FUN√á√ÉO TELEGRAM
# ======================================
def send_telegram_message(msg: str):
    """Envia logs ou status para o Telegram."""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": msg,
            "parse_mode": "HTML"
        }
        requests.post(url, data=payload, timeout=10)
        logger.info("üì§ Mensagem enviada para o Telegram.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Erro ao enviar mensagem para o Telegram: {e}")

# ======================================
# EXECU√á√ÉO PRINCIPAL
# ======================================
def main():
    logger.info("üöÄ In√≠cio da atualiza√ß√£o di√°ria de previs√µes...")
    send_telegram_message("üöÄ <b>Atualiza√ß√£o di√°ria iniciada.</b>")

    # 1Ô∏è‚É£ Executa o pipeline principal
    cmd = "python main.py --mode full"
    logger.info(f"üîß Executando comando: {cmd}")
    result = subprocess.run(cmd, shell=True)

    if result.returncode != 0:
        logger.error("‚ùå Pipeline di√°rio falhou!")
        send_telegram_message("‚ùå <b>Falha na atualiza√ß√£o di√°ria!</b>")
        return

    logger.info("‚úÖ Pipeline di√°rio conclu√≠do com sucesso.")
    send_telegram_message("‚úÖ <b>Pipeline di√°rio conclu√≠do com sucesso.</b>")

    # 2Ô∏è‚É£ Atualiza o Redis via endpoint
    try:
        headers = {"Authorization": f"Bearer {API_KEY}"}
        r = requests.post(API_URL, headers=headers, timeout=15)
        if r.status_code == 200:
            ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            logger.info(f"üïí √öltima atualiza√ß√£o salva ({ts})")
            send_telegram_message(f"üïí <b>√öltima atualiza√ß√£o:</b> {ts}")
        else:
            logger.warning(f"‚ö†Ô∏è Falha ao atualizar Redis ({r.status_code}) ‚Üí {r.text}")
            send_telegram_message(
                f"‚ö†Ô∏è <b>Falha ao chamar /meta/update</b>: {r.status_code}"
            )
    except Exception as e:
        logger.error(f"‚ùå Erro ao comunicar com a API: {e}")
        send_telegram_message(f"‚ùå <b>Erro ao comunicar com a API:</b> {e}")

    logger.info("üèÅ Processo conclu√≠do.")
    send_telegram_message("üèÅ <b>Processo di√°rio conclu√≠do.</b>")

# ======================================
# EXECU√á√ÉO DIRETA
# ======================================
if __name__ == "__main__":
    main()
